import cn.lalaki.pub.BaseCentralPortalPlusExtension

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id("cn.lalaki.central") version "1.2.5"
}

group = "io.github.goatfryed"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()

    registerFeature('json') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('xml') {
        usingSourceSet(sourceSets.main)
    }
}

javadoc {
    options {
        addBooleanOption('Xdoclint:all,-missing', true)
    }
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.16.0'
    implementation 'commons-io:commons-io:2.16.1'
    implementation 'org.jetbrains:annotations:23.0.0'

    implementation 'org.junit.jupiter:junit-jupiter:5.11.0'
    implementation 'org.jetbrains:annotations:23.0.0'
    api 'org.assertj:assertj-core:3.26.3'

    jsonApi 'net.javacrumbs.json-unit:json-unit-assertj:3.4.1'
    xmlApi 'org.xmlunit:xmlunit-assertj:2.10.0'
}

testing {
    //noinspection GroovyAssignabilityCheck // experimental gradle api
    suites {

        test {
            useJUnitJupiter()
            dependencies {
                implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
            }
        }

        testSpi(JvmTestSuite) {
            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }

        testRecipes(JvmTestSuite) {
            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(testSpi)
                    }
                }
            }
        }

        withType(JvmTestSuite).matching { it.name in ["testSpi","testRecipes"] }.configureEach {
            dependencies {
                implementation project()
                implementation 'org.apache.commons:commons-lang3:3.16.0'
                implementation 'commons-io:commons-io:2.16.1'
                implementation 'org.jetbrains:annotations:23.0.0'
                implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
            }
        }
    }
}

tasks.named("check") {
    dependsOn(testing.suites.testSpi)
    dependsOn(testing.suites.testRecipes)
}

tasks.named('javadoc', Javadoc) {
    setFailOnError(true)
}

def centralPortalPublishDummyRepo = new File(projectDir, "build/maven-central-dummy").toURI()
centralPortalPlus {
    url = centralPortalPublishDummyRepo
    username = findProperty("mavenCentralUsername")
    password = findProperty("mavenCentralPassword")
    publishingType = BaseCentralPortalPlusExtension.PublishingType.AUTOMATIC
}

publishing {
    repositories {
        maven {
            name = "mavenCentral"
            url = centralPortalPublishDummyRepo
        }
    }

    publications {
        lib(MavenPublication) {
            from components.java

            pom {
                name = 'AssertBaseline'
                description = 'AssertJ assertions for baseline testing'
                url = 'https://github.com/goatfryed/assert-baseline'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'goatfryed'
                        name = 'Omar Sood'
                        email = 'goatfryed@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/goatfryed/assert-baseline.git'
                    developerConnection = 'scm:git:ssh://github.com/goatfryed/assert-baseline.git'
                    url = 'https://github.com/goatfryed/assert-baseline'
                }

                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/goatfryed/assert-baseline/issues'
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingPrivateKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}